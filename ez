--This file was generated using Luraph Obfuscator v13 .5 .6

return (function (UX, OX, qX, pX, NX, lX, VX, aX, TX, XX, AX, FX, rX, mX, DX, EX, BX, JX, iX, yX, GX, kX, QX, RX, sX, hX, jX, YX, SX, bX, xX, HX, MX, IX, wX, oX, eX, fX, vX, z, ...) local zv = (0x00001); local C, I, u, P = select, rawset, TX, (tostring); local d = oX; local s, Q, g = nil, nil, nil; repeat do
        if not(zv <= 0X0)
    then
    if zv~ = 0x1 thenzv = 0X00000;
    else s = UX.wrap; zv = 0X2; end;
    else
        do g = string.char;
        end; zv = 3; end; end; until zv == 3; local U, v, x = vX, rawget, (unpack or IX); local l, H = next, (0X80000000); local V = (setmetatable); local T = VX; do zv = 0X1;
    end; local PX, c = nil, nil; do
        while zv < 0X2 do
            if zv ==
    0 then do c = lX;
    end; zv = 0X2;
    else
        do PX = {};
        end; zv = 0; end; end; end; zv = 0X0; local dX = (nil);
    while zv < 0x02 do
        do
            if zv~ =
    0X0 then dX = {}; zv = 2;
    else zv = 0X1; end; end; end; local Z = (type); zv = 0X4; local q, w, t, K, F, L = nil, nil, nil, nil, nil, (nil); repeat
    if not(zv <= 0X2) then do
        if zv <=
    4 then
    if zv~ = 0x003 then do q = sX;
    end; zv = 2;
    else L = EX.rep; zv = 0; end;
    else
        do
            if zv == 0x05 then t = DX; zv = 6;
    else
        do K = EX.byte;
        end; zv = 1; end; end; end; end;
    else if zv <= 0 then zv = 0x07;
    else if zv~ = 0X0001 then do w = {
        [0x0] = {
            [0X0] = 0X0,
            1,
            hX,
            0X0003,
            0X04,
            0X5,
            6,
            7,
            0X8,
            0x9,
            10,
            11,
            xX,
            13,
            14,
            15
        },
        {
            [0] = 1,
            0,
            0x0003,
            2,
            0X5,
            4,
            0X7,
            0X006,
            0X0009,
            8,
            mX,
            10,
            0X0d,
            0X000C,
            qX,
            0XE
        },
        {
            [0X0] = 0x2,
            FX,
            0,
            jX,
            0X6,
            QX,
            4,
            5,
            0X00A,
            11,
            8,
            0X9,
            0Xe,
            qX,
            12,
            0XD
        },
        {
            [0] = 3,
            2,
            0X001,
            0X0,
            0X7,
            0x6,
            5,
            0X4,
            mX,
            10,
            0X009,
            8,
            15,
            14,
            0X000d,
            12
        },
        {
            [0X0] = GX,
            OX,
            6,
            0x7,
            0,
            1,
            0X2,
            3,
            0XC,
            13,
            14,
            15,
            8,
            0x00009,
            10,
            11
        },
        {
            [0] = 0x5,
            0X4,
            0X7,
            0X6,
            1,
            0x000,
            0x00003,
            0X2,
            13,
            xX,
            0X0F,
            0XE,
            RX,
            0X08,
            11,
            0xa
        },
        {
            [0] = 0X006,
            QX,
            0X04,
            0X5,
            0X2,
            FX,
            0X0000,
            0X1,
            14,
            qX,
            0Xc,
            0Xd,
            HX,
            0XB,
            0X8,
            0X00009
        },
        {
            [0] = 0X7,
            0X006,
            5,
            0X00004,
            0X3,
            0x2,
            0X001,
            fX,
            15,
            0XE,
            13,
            0X0c,
            11,
            10,
            9,
            8
        },
        {
            [0] = 8,
            0X0009,
            10,
            0x00b,
            12,
            0xd,
            bX,
            15,
            0,
            1,
            2,
            FX,
            4,
            0X005,
            6,
            7
        },
        {
            [0x00] = 0X9,
            8,
            11,
            0X0A,
            13,
            12,
            0X0000F,
            14,
            0X001,
            0X000,
            FX,
            2,
            5,
            4,
            7,
            6
        },
        {
            [0] = 10,
            0XB,
            kX,
            9,
            14,
            15,
            12,
            0xD,
            2,
            0X03,
            0,
            1,
            0X06,
            0X7,
            0X4,
            0x5
        },
        {
            [0X000] = 0XB,
            0XA,
            9,
            0X00008,
            0XF,
            0xe,
            13,
            12,
            0x00003,
            2,
            1,
            0,
            0X7,
            0x6,
            0x005,
            4
        },
        {
            [fX] = 0x00c,
            eX,
            14,
            15,
            8,
            0X009,
            0XA,
            0XB,
            0x4,
            0X5,
            6,
            7,
            0x0,
            0X001,
            0X2,
            3
        },
        {
            [0x0] = 13,
            12,
            qX,
            0XE,
            9,
            kX,
            0XB,
            HX,
            5,
            GX,
            7,
            6,
            1,
            0x000,
            0X00003,
            2
        },
        {
            [0] = 0xE,
            qX,
            0XC,
            13,
            10,
            mX,
            8,
            9,
            0X6,
            QX,
            0x4,
            5,
            0X2,
            0X003,
            0,
            0X1
        },
        {
            [0X0] = 15,
            14,
            13,
            12,
            11,
            10,
            9,
            8,
            0X0007,
            6,
            5,
            4,
            0x003,
            2,
            0X00001,
            0x0
        }
    };
    end; do zv = 0x5;
    end;
    else F = (q and q() or iX); do zv = 3;
    end; end; end; end; until zv == 0X7; do zv = 6;
    end; local j, S, G, O, e, R, f, k, D = nil, nil, nil, nil, nil, nil, nil, nil, nil;
    while zv < 10 do
        do
            if not(zv <= 0x4)
    then do
        if zv <=
    6 then
    if zv~ = 0X5 then j = 1; do zv = 1;
    end;
    else Q = T(d(Q, 5), "..", function (nG) if K(nG, 0X00002) == 0X048 then local Mq = 1;
        while (true)
            do
                if Mq == 0 then
        return "";
        else G = t(d(nG, 1, jX)); Mq = 0X0; end; end;
        else local af, ef = 1, (nil);
        while (true)
            do
                if af == 0X0 then
        if not(G) then
        return ef;
        else local oY = (nil);
        for vf = 0X0, 0x1 do
            do
                if vf~ =
        0X00 then G = NX;
        else
            do oY = L(ef, G);
            end; end; end; end;
        return oY; end;
        break;
        else ef = g(t(nG, 0X000010)); af = 0X00000; end; end; end; end); zv = 0; end; elseif zv <= 7 then R = function () local y4, x4, w4, A4 = nil, nil, nil, (nil); local D4 = (0); repeat
    if D4 <= 0x0 then do y4, x4, w4, A4 = K(Q, j, j + 0X3);
    end; do D4 = 0X0002;
    end;
    else if D4~ = 0X001 then do j = j + 4;
    end; do D4 = 1;
    end;
    else return A4 * 16777216 + w4 * 0X10000 + x4 * 256 + y4; end; end; until(false); end; zv = 0X4;
    else
        do
            if zv~ = 0X8 then do k = f - 0X001;
    end; zv = 0X8;
    else D = {
        [0] = 1
    }; zv = 10; end; end; end; end;
    else if zv <= 1 then
    if zv == 0X0 then O = function () local Gm, Qm = 0, (nil);
    while (true)
        do
            do
                if not(Gm <= 0) then do
        if Gm ==
    0X1 then j = j + jX; Gm = 2;
    else return Qm; end; end;
    else
        do Qm = K(Q, j, j);
        end; do Gm = 1;
    end; end; end; end; end; zv = 3;
    else
        do S = {
            6,
            1,
            3
        };
        end; do zv = 2;
    end; end;
    else if not(zv <= 2) then
    if zv~ = 0X3 then f = 0x100000000; zv = 0X0009;
    else e = H - 0X1; do zv = 0X0007;
    end; end;
    else zv = 5; end; end; end; end; end; zv = 0X1; local i, b = nil, nil; repeat
    if not(zv <= 0) then do
        if zv~ =
    0X1 then b = 2 ^ 52; do break;
    end;
    else
        do i = function () local kv, vv = R(), (R());
        local Pv = 1;
    while true do
        if Pv~ =
    0X000 then
    if not(vv >= H) then
    else vv = vv - f; end; do Pv = 0;
    end;
    else return vv * f + kv; end; end; end; end; zv = 0; end; end;
    else
        do local Ig = 0X00002;
        for ve = 0X01, 0X1F do D[ve] = Ig;
        Ig = Ig * 0X2; end; end; zv = 0X0002; end; until(false); local E = function (Lb, ub, cb) local Yb = ((Lb / D[ub]) % D[cb]);
    for T1 = 0X0, 0x1 do
        if T1~ =
    0 then
    return Yb;
    else
        do Yb = Yb - Yb % 1;
        end; end; end; end; local N = function () local Oo = (R()); local Yo = R(); local Qo = (2); local Xo, No, yo = nil, nil, nil; repeat
    if not(Qo <= 0X1) then
    if Qo~ = 2 then Xo = 0X1; Qo = 0;
    else if Oo == fX and Yo == 0 then
    return fX; end; Qo = 3; end;
    else
        do
            if Qo~ = 0x0 then yo = E(Yo, 0x14, mX); Qo = 4;
    else No = (-1) ^ E(Yo, 0X1f, 1); Qo = 1; end; end; end; until Qo > 3; Qo = 0X0; local xo = (nil); repeat
    if Qo <= 0x000 then do xo = E(Yo, 0, 0X14) * f + Oo;
    end; Qo = 0X1;
    else
        do
            if Qo == 0X1 then
    if yo == 0X0 then
    if xo~ = 0X000 then do yo = 0X1;
    end; Xo = 0x0000;
    else return No * 0x00; end;
    else if yo == wX then
    if xo == 0X0 then
    return No * (0 / 0X000);
    else return No * (1 / 0X0000); end; end; end; Qo = 2;
    else return No * (0X002 ^ (yo - 1023)) * (xo / b + Xo); end; end; end; until false; end; local m, p = setfenv, ((bit or pX)); local B = p and p[BX] or
    function (lM, wM) local vM, oM = 0X0002, (nil);
    while '<4RK\035\076u'
    do
        if not(vM <= 0)
    then
    if vM~ = 1 then do lM = lM % f;
    end; do vM = 0X00;
    end;
    else
        do oM = fX;
        end;
    break; end;
    else wM = wM % f; vM = 0X1; end; end; local LM = 0X1;
    while lM > 0X00000 and wM > 0x00000 do local wI, yI, sI = 3, nil, (nil); while wI < 6 do
        do
            if wI <= 2 then
    if wI <= 0 then wM = (wM - sI) / 16; wI = 0X1;
    else if wI~ = 0x1 then sI = wM % 0X10; wI = 0X0004;
    else LM = LM * AX; do wI = 0x6; end; end; end;
    else if not(wI <= 3) then
    if wI == 0x4 then oM = oM + w[yI][sI] * LM; wI = 5;
    else
        do lM = (lM - yI) / 16;
        end; do wI = 0; end; end;
    else
        do yI = lM % AX;
        end; wI = 0X2; end; end; end; end; end; do return oM + lM * LM + wM * LM; end; end; local A = (p and p[aX] or
        function (YL, qL) for h4 = 0X0, 0X2 do
            if h4 <=
        0 then YL = YL % f; elseif h4~ = 1 then
        return ((YL + qL) - B(YL, qL)) / 0X0002;
        else
            do qL = qL % f;
            end; end; end; end); local a = (p and p.bor or
        function (L7, P7) local r7 = 0x2; repeat do
            if not(r7 <= 0X0)
        then
        if r7~ = 1 then L7 = L7 % f; r7 = 0X1;
        else P7 = P7 % f; r7 = 0x0; end;
        else return k - A(k - L7, k - P7); end; end; until false; end); local r, y, zX, J = nil, nil, nil, (nil); local M = (p and p[MX] or
        function (Cw) return k - (Cw % f); end);
    for Vd = 0, 5 do
        do
            if not(Vd <= 0X00002) then
    if not(Vd <= 3) then
    if Vd == 4 then zX = function () local ir, lr = 0, (0x0); repeat local Wj = K(Q, j, j); j = j + 1; do ir = a(ir, r(A(Wj, 127), lr)); end;
    if A(Wj, 0X80) ~ = 0X0000 then
    else return ir; end; lr = lr + 7; until false; end;
    else J = {
        [0X4] = 5,
        [1] = 0X00005,
        [9] = 0X7,
        [7] = 0x3,
        [6] = 0x2,
        [4] = 9,
        [0] = 9,
        [5] = 0X04,
        [3] = 0x00004,
        [9] = 0x00002
    }; end;
    else y = y or
    function (sb, yb) if not(yb >= 32) then
    else return 0X0000; end; do
        if not(yb < 0X000) then
    else return r(sb, -yb); end; end; local Ob = (nil); do
        for jp = 0X0000, 0X0001 do
            do
                if jp == 0X00000 then Ob = (sb % f / D[yb]);
    else
        do return Ob - Ob % 0X1;
        end; end; end; end; end; end; end;
    else if not(Vd <= 0x000) then
    if Vd~ = 1 then do r = r or
    function (P0, s0) if s0 >= rX then do return 0X0; end; end; do
        if s0 < 0 then
    return y(P0, -s0); end; end; do return (P0 * D[s0]) % f; end; end; end;
    else y = p and p.rshift; end;
    else
        do r = p and p.lshift;
        end; end; end; end; end; local cX = function () local qG, cG = 2, nil;
    while 0.2843629698218507 do
        if not(qG <= 0X0) then
    if qG == 0X001 then do return cG; end;
    else cG = zX(); do qG = 0X0000; end; end;
    else if not(cG > e) then
    else return cG - f; end; do qG = 0X1; end; end; end; end; local nX = O(); local CX = (O()); zv = 5; local tX, uX, h, ZX, WX, KX, gX, LX, o = nil, nil, nil, nil, nil, nil, nil, nil, (nil); do
        while zv <= 10 do
            if zv <= 4 then
    if zv <= 1 then do
        if zv == 0x00 then uX = function (kb) local Db = (R()); local vb = "";
    for mq = 0x1, Db, 0X1f3D do local fq, Bq, Sq = 2, nil, nil;
    while fq~ = 0X5 do
        do
            if fq <= 1 then
    if fq~ = 0X0 then Sq = {
        K(Q, j + mq - 1, j + Bq - 1)
    }; fq = 0;
    else
        for jF = 0X0001, #Sq do
            for HV = 0X0, 0X01 do
                if HV == 0x0000 then(Sq)[jF] = B(Sq[jF], nX);
    else nX = (kb * nX + 0x002F) % SX; end; end; end; fq = 3; end;
    else if fq <= 0X00002 then Bq = mq + 7997 - 0x1; fq = 4;
    else if fq~ = 3 then
    if not(Bq > Db) then
    else Bq = Db; end; fq = 1;
    else vb = vb..g(x(Sq)); fq = 5; end; end; end; end; end; end; local Qb = (1); repeat
    if Qb~ = 0 then j = j + Db; do Qb = 0; end;
    else
        do return vb;
        end; end; until(false); end; zv = 0x2;
    else
        do o = EX.match;
        end; zv = 8; end; end;
    else if not(zv <= 0X02) then
    if zv~ = 0X0003 then WX = 1; zv = 3;
    else zv = 0Xa; end;
    else h = JX; zv = 6; end; end; elseif zv <= 0x7 then
    if zv <= 5 then tX = function (DR) local RR, VR = nil, nil;
    for jG = 0, 0X01 do
        if jG~ = 0x0 then VR = B(RR[1], CX);
    else RR = {
        K(Q, j, j + 3)
    }; end; end; local mR = (B(RR[0X2], CX)); local LR = (B(RR[FX], CX)); local eR = (B(RR[GX], CX)); local wR = 0; do
        while (true)
            do
                if wR <= 0X00 then CX = (yX * CX + DR) % 0X100; wR = 1;
    else if wR~ = 0X001 then
    return eR * 0X1000000 + LR * 0X10000 + mR * 0X100 + VR;
    else j = j + 0X0004; do wR = 2; end; end; end; end; end; end; zv = 0X0;
    else if zv~ = 6 then
    function gX() local t3 = {}; local j3, w3, U3, b3, v3, Q3, G3 = 9, nil, nil, nil, nil, nil, (nil); repeat do
        if j3 <= 5 then
    if not(j3 <= 2) then
    if j3 <= 3 then
    for Zg = jX, zX() do
        do(t3)[Zg] = {
            O(),
            zX()
        };
        end; end; j3 = 7;
    else if j3 == 4 then do w3[0X6] = zX(); end; j3 = 0X6;
    else Q3 = R() - 99049; j3 = 10; end; end;
    else if j3 <= 0 then b3 = 1; j3 = 4;
    else if j3~ = 0X1 then U3 = {}; j3 = 0X0;
    else v3 = w3[9]; j3 = 0X5; end; end; end;
    else if not(j3 <= 0X008) then
    if not(j3 <= 9) then
    if j3 == 10 then
    for DA = 0x0, Q3 - 0X00001 do
        do v3[DA] = gX();
        end; end; j3 = 0x00008;
    else(w3)[2] = t3; j3 = 0X3; end;
    else
        do w3 = {
            NX,
            nil,
            nil,
            NX,
            NX,
            nil,
            {},
            {},
            {}
        };
        end; j3 = 0X2; end;
    else if not(j3 <= 0X6) then do
        if j3 == 7 then do w3[13] = O(); end;
    break;
    else G3 = {}; do j3 = 11; end; end; end;
    else w3[4] = zX(); j3 = 1; end; end; end; end; until(false); j3 = 0X002; local i3 = (nil); repeat
    if j3 <= 1 then
    if j3~ = 0 then(w3)[0X3] = E(i3, hX, 1) ~ = 0; do j3 = 0; end;
    else
        do(w3)[0X000011] = O();
        end; j3 = 0X3; end;
    else if j3 <= 2 then i3 = O(); j3 = 4;
    else if j3~ = 0X0003 then w3[1] = E(i3, 1, 1) ~ = 0x0; j3 = 0X1;
    else w3[16] = O(); do j3 = 5; end; end; end; end; until j3 > 4; j3 = 0X00; local z3, y3, S3 = nil, nil, (nil); repeat
    if not(j3 <= 1) then do
        if j3 == 2 then do y3 = O(); end; j3 = 0X3;
    else S3 = O() ~ = 0; do break; end; end; end;
    else
        do
            if j3 == 0 then w3[5] = zX(); j3 = 0x001;
    else z3 = R() - 7466; j3 = 0X02; end; end; end; until(false); j3 = 0X000; do repeat
    if j3 <= 0X01 then
    if j3~ = 0x0 then(w3)[AX] = R(); do j3 = 0x004; end;
    else
        for zW = 1, z3 do local jW, CW, RW = 0, nil, (nil); while jW < 0X3 do
            if not(jW <= 0) then
    if jW == 1 then U3[zW - 1] = b3; jW = 3;
    else
        do RW = nil;
        end; jW = 0X001; end;
    else CW = O(); jW = 0x2; end; end; do
        if CW == 0xf2 then RW = d(uX(y3), N() + R()); elseif CW == 0X0002 then do RW = d(uX(y3), R()); end; elseif CW == 0x053 then do RW = d(uX(y3), 5); end; elseif CW == 66 then RW = XX; elseif CW == 0X0003C then do RW = d(uX(y3), 14); end; elseif CW == 150 then RW = i(); elseif CW == 185 then RW = false; elseif CW == 0X00098 then RW = R(); elseif CW == 196 then RW = N(); end; end; local hW = ({
        RW,
        {}
    }); jW = 0X1;
    while jW <= 0x2 do
        do
            if jW <= 0 then
    if S3 then(PX)[WX] = hW; WX = WX + jX; end; jW = 3;
    else if jW~ = 0X0001 then b3 = b3 + jX; jW = 0;
    else G3[b3] = hW; do jW = 2; end; end; end; end; end; end; j3 = 0X2; end;
    else if j3 == 0X2 then(w3)[13] = O(); do j3 = 3; end;
    else w3[19] = O(); j3 = 1; end; end; until j3 > 0X0003; end; local o3 = w3[0X7]; j3 = 0x4; local J3 = nil;
    while j3~ = 6 do
        if not(j3 <= 2) then do
        if j3 <= 0X3 then
    for Hk = 0X1, J3 do(o3)[Hk] = {
        [6] = cX(),
        [0X0005] = O(),
        [0x0004] = O(),
        [7] = zX(),
        [1] = cX(),
        [3] = cX(),
        [2] = O()
    }; end; j3 = 0X2;
    else if j3 == 4 then J3 = R() - 49200; j3 = 3;
    else
        do w3[0X011] = O();
        end; j3 = 0X6; end; end; end;
    else if not(j3 <= 0X0) then
    if j3 == 1 then(w3)[0Xf] = R(); do j3 = 0x0; end;
    else
        do
            for IN = 0X1, J3 do local hN = nil;
            for Jl = 0X0, 1 do
                if Jl~ = 0 then
    for eS, PS in YX(S) do local LS, YS = nil, nil; do
        for Wn = 0X00000, 0x0002 do
            if not(Wn <= 0X0) then
    if Wn == 1 then YS = hN[LS];
    else
        do
            if YS == 0x07 then local og, ig, cg = 0X2, nil, nil;
    while og <= 0X2 do
        if og <= 0X0000 then cg = G3[ig]; og = 1;
    else if og~ = 0X1 then do ig = U3[hN[PS]]; end; og = 0x0;
    else if cg then do hN[LS] = cg[1]; end; local Wz = (nil);
    for bF = 0, 1 do
        if bF == 0 then do Wz = cg[0X2]; end;
    else(Wz)[#Wz + 0X1] = {
        hN,
        LS
    }; end; end; end; og = 0X3; end; end; end; elseif YS == 0Xa then(hN)[PS] = IN + hN[PS] + 1; end; end; end;
    else LS = J[PS]; end; end; end; end;
    else hN = w3[0X7][IN]; end; end; end; end; do j3 = 1; end; end;
    else w3[15] = R(); j3 = 0X5; end; end; end; do j3 = 0; end; repeat
    if j3~ = 0x0 then do return w3; end;
    else w3[0XF] = R(); j3 = 1; end; until(false); end; zv = 0X9;
    else
        do ZX = function (...) return C("\035", ...), {
            ...
        };
        end; end; do zv = 4; end; end; end;
    else
        do
            if not(zv <= 8) then do
        if zv~ = 9 then
    function KX(ZI, bI, hI) local OI = (bI[5]); local MI = (bI[8]); local yI = (bI[1]); local mI = (bI[0X3]); local eI, WI, UI = bI[0X7], bI[9], (bI[0X6]); local FI = (V({}, {
        __mode = "v"
    })); local xI, KI = bI[4], (nil);
    if xI < 0X1 then KI = function (...) local Pk = (0X1); local bk, Wk = 0X0, {}; local tk = ((q and q() or _ENV)); local dk = {
        [1] = Wk,
        [2] = bI
    }; local Dk = (tk == F and hI or tk); local ok, Jk = ZX(...); do ok = ok - 1; end;
    for HZ = 0X00, ok do
        if not(UI > HZ) then
    break;
    else(Wk)[HZ] = Jk[HZ + 0X1]; end; end;
    if not yI then Jk = nil; elseif not(mI) then
    else
        do(Wk)[UI] = {
            n = ok >= UI and ok - UI + 0X1 or 0,
            x(Jk, UI + 1, ok + 1)
        };
        end; end;
    if Dk == tk then
    else if not(m) then _ENV = Dk;
    else m(KI, Dk); end; end;
    while true do local n0 = eI[Pk]; local A0 = (n0[0x007]); Pk = Pk + 0x01; do
        if A0 < 0x0031 then
    if A0 >= 0X18 then
    if A0 >= 0X000024 then
    if A0 < 42 then
    if not(A0 < 0x000027) then do
        if A0 < 40 then local qP = (n0[6]); bk = qP + n0[0X0001] - 0x0001;
    (Wk[qP])(x(Wk, qP + 0X00001, bk)); bk = qP - 0x01;
    else if A0 == 0X00029 then Wk[n0[0x6]] = Wk[n0[0x1]] * Wk[n0[0X003]];
    else
        do Wk[n0[6]] = Wk[n0[0X1]] / n0[0X4];
        end; end; end; end;
    else if A0 < 0X00025 then Pk = n0[1];
    else
        do
            if A0~ = 0X26 then do bk = n0[6]; end; Wk[bk](); bk = bk - 1;
    else local Hl, rl = ok - UI, n0[0X6];
    if not(Hl < 0X00000) then
    else Hl = -1; end;
    for mf = rl, rl + Hl do
        do Wk[mf] = Jk[UI + (mf - rl) + 1];
        end; end; bk = rl + Hl; end; end; end; end;
    else if A0 >= 0X2D then
    if not(A0 >= 0X2F) then
    if A0~ = 46 then
    if not Wk[n0[6]] then Pk = n0[1]; end;
    else
        do Wk[n0[0X6]] = {
            x({}, 1, n0[1])
        };
        end; end;
    else if A0~ = 48 then local dQ = (n0[6]); local SQ = (s(function (...)(h)();
        for Y_ in ...do h(true, Y_);
        end; end));
    (SQ)(Wk[dQ], Wk[dQ + 0x1], Wk[dQ + 2]); do bk = dQ; end;
    (Wk)[dQ] = SQ; Pk = n0[1];
    else local e3 = n0[0x6]; local v3 = s(function (...)(h)();
        for NY, wY, CY, sY, fY, WY, ZY, JY, jY, oY in ...do h(true, {
            NY,
            wY,
            CY,
            sY,
            fY,
            WY,
            ZY,
            JY,
            jY,
            oY
        });
        end; end); v3(Wk[e3], Wk[e3 + 1], Wk[e3 + 2]); bk = e3; Wk[e3] = v3; Pk = n0[0X01]; end; end;
    else if not(A0 < 0x2b) then
    if A0 == 44 then(Wk)[n0[6]] = y(Wk[n0[1]], Wk[n0[0X00003]]);
    else(Wk)[n0[0x6]] = a(Wk[n0[0x1]], Wk[n0[3]]); end;
    else Wk[n0[0X6]] = Wk[n0[0x1]] == Wk[n0[0x03]]; end; end; end;
    else if A0 >= 30 then
    if not(A0 < 33) then
    if not(A0 >= 34) then Wk[n0[6]] = Wk[n0[0X1]] ^ Wk[n0[0X03]];
    else if A0~ = 0x23 then local H3 = n0[0X0006];
    (Wk)[H3] = Wk[H3](x(Wk, H3 + 1, bk)); do bk = H3; end;
    else local Ts, Us = n0[6], n0[0X1]; bk = Ts + Us - 1; do repeat local RP, WP = FI, Wk;
    if #RP > 0X00000 then local j8 = ({}); do
        for qr, Gr in l, RP do
            for NS, vS in l, Gr do
                if not(vS[1] == WP and vS[0X2] >= 0) then
    else local Fr = vS[0x002]; do
        if not j8[Fr] then do(j8)[Fr] = {
        WP[Fr]
    }; end; end; end;
    (vS)[0x1] = j8[Fr]; vS[2] = 1; end; end; end; end; end; until true; end; do return Wk[Ts](x(Wk, Ts + 0X1, bk)); end; end; end;
    else if not(A0 >= 31) then(Wk)[n0[6]] = Wk[n0[1]] / Wk[n0[3]];
    else if A0~ = 0X20 then local b5 = (n0[0X6]);
    (Wk[b5])(Wk[b5 + 1], Wk[b5 + 2]); bk = b5 - 0X00001;
    else if Wk[n0[1]] ~ = Wk[n0[0X3]] then
    else Pk = n0[0X00006]; end; end; end; end;
    else if not(A0 >= 0x01b) then
    if not(A0 >= 0x000019) then Wk[n0[6]] = Wk[n0[0X1]] > Wk[n0[3]];
    else
        do
            if A0 == 26 then do
        if Wk[n0[0x0006]] then do Pk = n0[1]; end; end; end;
    else local yn = (n0[6]); bk = yn + n0[1] - 0X1;
    (Wk)[yn] = Wk[yn](x(Wk, yn + 1, bk)); do bk = yn; end; end; end; end;
    else if not(A0 >= 28) then local vF = (n0[6]); Wk[vF](x(Wk, vF + 1, bk)); bk = vF - 1;
    else if A0~ = 29 then do
        if n0[0X3] == 0Xb5 then do Pk = Pk - 0x01; end; eI[Pk] = {
        [1] = (n0[0X1] - 52),
        [0X6] = (n0[6] - 0X34),
        [7] = 0X0054
    }; elseif n0[0X3] == 141 then Pk = Pk - 0x001;
    (eI)[Pk] = {
        [0X07] = 0X00A,
        [6] = (n0[0X6] - 0x002B),
        [0X1] = (n0[0X1] - 43)
    }; elseif n0[3] == 209 then do Pk = Pk - 0X1; end; eI[Pk] = {
        [0x01] = (n0[1] - 0x0070),
        [7] = 38,
        [6] = (n0[0X00006] - 112)
    };
    else repeat local ZK, QK, cK = FI, Wk, n0[0X6];
    if #ZK > 0 then local Xg = {};
    for Ns, bs in l, ZK do
        for Mm, Im in l, bs do
            if Im[0X1] == QK and Im[0X2] >= cK then local SJ = (Im[0X00002]); do
        if not Xg[SJ] then do Xg[SJ] = {
        QK[SJ]
    }; end; end; end; do Im[0x01] = Xg[SJ]; end;
    (Im)[2] = 1; end; end; end; end; until true; end; end;
    else repeat local Ge, ee = FI, Wk;
    if not(#Ge > 0) then
    else local Tr = {};
    for RN, hN in l, Ge do
        for Oi, Mi in l, hN do
            do
                if not(Mi[1] == ee and Mi[2] >= 0X0000) then
    else local rS = (Mi[2]);
    if not(not Tr[rS]) then
    else(Tr)[rS] = {
        ee[rS]
    }; end; Mi[0x01] = Tr[rS]; do Mi[2] = 0X01; end; end; end; end; end; end; until true;
    return x(Wk, n0[6], bk); end; end; end; end; end;
    else if A0 < 12 then
    if A0 < 6 then
    if not(A0 < 3) then
    if A0 < 4 then do Wk[n0[0X6]] = dk[n0[0X01]]; end;
    else if A0 == 0X00005 then Wk[n0[6]] = {};
    else local wc = n0[0X6];
    (Wk)[wc] = Wk[wc](Wk[wc + 0X1]); do bk = wc; end; end; end;
    else if not(A0 < 1) then do
        if A0 == 0x2 then local P3 = n0[0X1]; Wk[n0[0X6]] = Wk[P3]..Wk[P3 + 0x1];
    else if Wk[n0[1]] < Wk[n0[3]] then Pk = n0[6]; end; end; end;
    else(Wk)[n0[0X6]] = Wk[n0[1]][n0[0X04]]; end; end;
    else
        do
            if not(A0 >= 0x0009) then
    if not(A0 < 7) then do
        if A0 == 8 then do(Wk)[n0[6]] = n0[0X00005]; end;
    else local PE = n0[6]; local XE, ME = Wk[PE]();
    if not(XE) then
    else
        do
            for rw = 1, n0[0X00003] do(Wk)[PE + rw] = ME[rw];
            end;
        end; Pk = n0[1]; end; end; end;
    else local z8 = (n0[6]); local t8 = (Wk[z8]); local c8, R8 = Wk[z8 + 0X1], (Wk[z8 + 0x00002]); Wk[z8] = s(function () for a5 = t8, c8, R8 do(h)(true, a5);
        end; end); Pk = n0[0X0001]; end;
    else if not(A0 >= 0x0a) then local dF = (n0[0X00006]); Wk[dF](Wk[dF + 0x1]); bk = dF - 1;
    else
        do
            if A0 == 0X0000B then do Wk[n0[0x6]] = n0[0X05]; end;
    else if n0[3] == 7 then Pk = Pk - 1; eI[Pk] = {
        [0x06] = (n0[6] - 0x000016),
        [0x7] = 0X039,
        [0X001] = (n0[0X1] - 0X16)
    }; elseif n0[3] ~ = 132 then
    for Ot = n0[6], n0[1] do(Wk)[Ot] = nil; end;
    else Pk = Pk - 0X0001; eI[Pk] = {
        [1] = (n0[0x01] - 159),
        [0X7] = 0X54,
        [6] = (n0[6] - 159)
    }; end; end; end; end; end; end; end;
    else
        do
            if A0 < 18 then
    if not(A0 < 0x000F) then
    if not(A0 >= 16) then local wi = (WI[n0[0X0001]]); local bi, ai = wi[2], (nil); local Zi = (#bi);
    if Zi > 0 then do ai = {}; end; do
        for nl = 1, Zi do local ml = (bi[nl]);
        if ml[1] == 0X0 then do(ai)[nl - 1] = {
        Wk,
        ml[0X0002]
    }; end;
    else(ai)[nl - 0X0001] = ZI[ml[2]]; end; end; end; U(FI, ai); end; Wk[n0[6]] = KX(ai, wi, Dk);
    else if A0~ = 17 then Wk[n0[6]] = A(Wk[n0[0X0001]], Wk[n0[3]]);
    else repeat local f4, i4 = FI, Wk;
    if not(#f4 > 0X0) then
    else local hH = ({});
    for Op, Sp in l, f4 do
        do
            for on, Wn in l, Sp do
                if not(Wn[1] == i4 and Wn[2] >= 0) then
    else local d_ = (Wn[0X002]);
    if not hH[d_] then(hH)[d_] = {
        i4[d_]
    }; end; Wn[0X1] = hH[d_]; do Wn[0X02] = 1; end; end; end; end; end; end; until true;
    return Wk[n0[0X6]](); end; end;
    else if not(A0 >= 0X0000D) then Wk[n0[0x006]] = Wk[n0[1]] % n0[4];
    else if A0 == 14 then do
        if not(Wk[n0[0X1]] <= Wk[n0[0x3]]) then
    else Pk = n0[6]; end; end;
    else Wk[n0[0X00006]][n0[0X5]] = Wk[n0[3]]; end; end; end;
    else if A0 < 21 then do
        if not(A0 >= 19) then local HM = ZI[n0[0X1]]; HM[0X1][HM[0x2]] = Wk[n0[6]];
    else if A0~ = 0X14 then repeat local fa, Ta = FI, Wk;
    if #fa > 0X0 then local vV = {};
    for T2, Z2 in l, fa do
        do
            for oR, IR in l, Z2 do
                if IR[1] == Ta and IR[2] >= 0X0 then local eJ = IR[2];
    if not vV[eJ] then do vV[eJ] = {
        Ta[eJ]
    }; end; end; do(IR)[0X0001] = vV[eJ]; end; IR[2] = 0X01; end; end; end; end; end; until true; local OV = n0[6];
    return Wk[OV](x(Wk, OV + 0x1, bk));
    else Wk[n0[6]] = -Wk[n0[0X1]]; end; end; end;
    else if not(A0 >= 22) then Wk[n0[0X06]][n0[5]] = n0[4];
    else if A0 == 0X17 then(Wk)[n0[6]] = true;
    else(Wk)[n0[0X6]] = Dk[n0[0x5]]; end; end; end; end; end; end; end;
    else if not(A0 >= 0X049) then
    if A0 < 61 then
    if not(A0 < 55) then
    if A0 >= 58 then
    if A0 < 59 then(Wk)[n0[0X6]] = #Wk[n0[0X1]];
    else if A0~ = 0x0003C then
    if Wk[n0[1]] ~ = n0[0X004] then
    else Pk = n0[0X00006]; end;
    else
        do Wk[n0[0X06]] = Wk[n0[1]] < Wk[n0[3]];
        end; end; end;
    else if not(A0 >= 0X38) then do Wk[n0[0X6]] = nil; end;
    else if A0~ = 57 then(Wk)[n0[0X06]] = dX[n0[1]];
    else
        do
            if n0[3] == 179 then Pk = Pk - 0X001; eI[Pk] = {
        [1] = (n0[1] - 0X99),
        [6] = (n0[0X6] - 153),
        [0X07] = 0x1D
    }; elseif n0[3] ~ = 246 then do repeat local vj, Ej = FI, (Wk); do
        if not(#vj > 0X0) then
    else local KK = ({});
    for T0, v0 in l, vj do
        for MJ, tJ in l, v0 do
            if not(tJ[1] == Ej and tJ[0X002] >= 0X000) then
    else local a4 = tJ[2]; do
        if not(not KK[a4]) then
    else
        do(KK)[a4] = {
            Ej[a4]
        };
        end; end; end;
    (tJ)[1] = KK[a4];
    (tJ)[2] = 1; end; end; end; end; end; until true; end;
    return Wk[n0[0X06]];
    else Pk = Pk - 1;
    (eI)[Pk] = {
        [0X1] = (n0[0X1] - 0X4e),
        [7] = 20,
        [6] = (n0[0X6] - 78)
    }; end; end; end; end; end;
    else
        do
            if A0 >= 52 then
    if A0 >= 0X35 then
    if A0 == 54 then Wk[n0[0X6]] = Wk[n0[1]] % Wk[n0[3]];
    else local hz = n0[0X006]; local Xz, Jz, Iz = Wk[hz]();
    if Xz then do(Wk)[hz + 1] = Jz; end; Wk[hz + 2] = Iz; Pk = n0[0x00001]; end; end;
    else local hq = (n0[6]); local Tq, Bq = Wk[hq]();
    if Tq then do Pk = n0[1]; end; Wk[hq + 3] = Bq; end; end;
    else if not(A0 >= 50) then local m7 = n0[6];
    (Wk)[m7] = Wk[m7](Wk[m7 + 0x0001], Wk[m7 + 0X02]); bk = m7;
    else
        do
            if A0 == 0X000033 then do
        if Wk[n0[0X1]] == n0[4] then
    else
        do Pk = n0[0X6];
        end; end; end;
    else local tz = n0[6]; local qz, oz = Wk[tz], ((n0[3] - 0x1) * 50);
    for b3 = 1, bk - tz do(qz)[oz + b3] = Wk[tz + b3]; end; end; end; end; end; end; end;
    else if A0 >= 67 then do
        if not(A0 >= 0x000046) then
    if not(A0 >= 0X44) then(Wk)[n0[0X6]] = M(Wk[n0[0x001]]);
    else if A0~ = 0X45 then local JG = (n0[6]);
    for Xv = JG, JG + (n0[0X1] - 1) do Wk[Xv] = Jk[UI + (Xv - JG) + 1]; end;
    else local Pu = (n0[0X00006]); local xu, ru = Wk[Pu]();
    if xu then Wk[Pu + 0x1] = ru; do Pk = n0[1]; end; end; end; end;
    else if not(A0 >= 0X47) then do(Wk)[n0[6]] = Wk[n0[1]] - Wk[n0[3]]; end;
    else
        do
            if A0 == 0X48 then dX[n0[1]] = Wk[n0[6]];
    else
        do
            if not(not(Wk[n0[0X1]] <= n0[4])) then
    else Pk = n0[6]; end; end; end; end; end; end; end;
    else if not(A0 < 64) then
    if not(A0 >= 65) then local YT, zT = n0[0x006], n0[0X00001];
    if zT~ = 0X0000 then bk = YT + zT - 1; end; local mT, jT, ET = nil, nil, n0[3];
    if zT~ = 0X01 then do mT, jT = ZX(Wk[YT](x(Wk, YT + 0X01, bk))); end;
    else mT, jT = ZX(Wk[YT]()); end; do
        if ET~ = 0x01 then do
        if ET == 0 then mT = mT + YT - 0X1; bk = mT;
    else
        do mT = YT + ET - 0X2;
        end; do bk = mT + 0X1; end; end; end; local jW = 0X0;
    for zZ = YT, mT do jW = jW + 0X01; Wk[zZ] = jT[jW]; end;
    else
        do bk = YT - 1;
        end; end; end;
    else if A0~ = 0X000042 then(Wk)[n0[6]] = Wk[n0[0X1]] <= Wk[n0[3]];
    else
        do(Wk)[n0[0X6]] = Wk[n0[0x1]] ~ = Wk[n0[0x3]];
        end; end; end;
    else
        do
            if not(A0 < 0X00003e) then
    if A0 == 0X3F then do Wk[n0[0X6]] = Wk[n0[1]] - n0[4]; end;
    else
        do(Wk)[n0[0X006]] = Wk[n0[1]] * n0[4];
        end; end;
    else if not(not(Wk[n0[1]] <= Wk[n0[3]])) then
    else Pk = n0[0x6]; end; end; end; end; end; end;
    else if A0 < 85 then do
        if A0 >= 79 then
    if A0 < 82 then
    if not(A0 < 0x00050) then do
        if A0 == 81 then do
        if Wk[n0[0x01]] == Wk[n0[3]] then
    else Pk = n0[6]; end; end;
    else dk[n0[1]] = Wk[n0[0x06]]; end; end;
    else
        do
            if not(not(n0[0x5] < Wk[n0[3]])) then
    else
        do Pk = n0[0X00006];
        end; end; end; end;
    else
        do
            if not(A0 >= 0X0053) then do(Wk)[n0[0X006]] = Wk[n0[1]] + Wk[n0[0X0003]]; end;
    else if A0 == 0X54 then do
        if n0[0X00003] == 106 then do Pk = Pk - 1; end; eI[Pk] = {
        [0X6] = (n0[0X6] - 192),
        [1] = (n0[0x001] - 0Xc0),
        [0X007] = 0X001d
    }; elseif n0[3] ~ = 0X58 then do repeat local Cq, hq = FI, (Wk);
    if #Cq > 0 then local nT = {};
    for Ae, Ge in l, Cq do
        for bf, df in l, Ge do
            if df[0X1] == hq and df[0X2] >= 0X0 then local HH = df[0X2];
    if not(not nT[HH]) then
    else(nT)[HH] = {
        hq[HH]
    }; end; df[1] = nT[HH]; do(df)[2] = 0X1; end; end; end; end; end; until true; end;
    return;
    else Pk = Pk - 1; eI[Pk] = {
        [0X0006] = (n0[6] - 220),
        [0x0001] = (n0[0X1] - 220),
        [0x7] = 58
    }; end; end;
    else Wk[n0[6]] = false; end; end; end; end;
    else
        do
            if A0 >= 0X00004c then
    if A0 >= 77 then
    if A0 == 0X4e then do Wk[n0[0X6]] = r(Wk[n0[0x001]], Wk[n0[3]]); end;
    else if n0[0X3] == 0X07c then Pk = Pk - 1;
    (eI)[Pk] = {
        [6] = (n0[0X06] - 0X48),
        [7] = 87,
        [0X0001] = (n0[1] - 72)
    }; elseif n0[3] == 0X9f then Pk = Pk - 1;
    (eI)[Pk] = {
        [7] = 87,
        [6] = (n0[6] - 0X87),
        [0X1] = (n0[1] - 135)
    };
    else
        do repeat local Ys, Js = FI, Wk;
        if #Ys > 0 then local Qj = ({});
    for I1, g1 in l, Ys do
        for Ta, Ja in l, g1 do
            if not(Ja[0x1] == Js and Ja[0X2] >= 0X0) then
    else local rx = (Ja[0X2]); do
        if not(not Qj[rx]) then
    else
        do(Qj)[rx] = {
            Js[rx]
        };
        end; end; end; do Ja[1] = Qj[rx]; end; Ja[0x002] = 1; end; end; end; end; until true; end; local xT = n0[0X6];
    return x(Wk, xT, xT + n0[1] - 0X2); end; end;
    else Wk[n0[0x006]][Wk[n0[0x00001]]] = Wk[n0[0x003]]; end;
    else if A0 < 0X4A then do(Wk)[n0[0X006]] = B(Wk[n0[1]], Wk[n0[0X3]]); end;
    else if A0 == 75 then Wk[n0[6]][Wk[n0[1]]] = n0[4];
    else
        do(Wk)[n0[6]] = Wk[n0[0X1]] ~ = n0[4];
        end; end; end; end; end; end; end;
    else
        do
            if not(A0 >= 91) then do
        if A0 >= 0X58 then
    if A0 < 0x59 then bk = n0[0X6]; Wk[bk] = Wk[bk]();
    else
        do
            if A0~ = 90 then Wk[n0[0X6]] = Wk[n0[0X01]][Wk[n0[0x3]]];
    else local I2 = (ZI[n0[0X1]]); Wk[n0[0X06]] = I2[0X1][I2[2]]; end; end; end;
    else
        do
            if A0 < 0X56 then do
        if not(Wk[n0[0x1]] < n0[4]) then Pk = n0[6]; end; end;
    else if A0~ = 87 then local VK = Wk[n0[1]] / Wk[n0[0X3]]; do Wk[n0[6]] = VK - VK % 1; end;
    else Wk[n0[0X0006]] = Wk[n0[1]]; end; end; end; end; end;
    else if A0 < 0X0005E then
    if not(A0 < 0X05c) then
    if A0 == 0x5d then local NM = n0[6]; local gM = s(function (...) h();
        for ux, Tx in ...do(h)(true, ux, Tx);
        end; end); gM(Wk[NM], Wk[NM + 1], Wk[NM + 0X2]); do bk = NM; end; do Wk[NM] = gM; end; Pk = n0[0X1];
    else(Wk)[n0[0X6]] = Wk[n0[1]] >= Wk[n0[0x03]]; end;
    else local FO = (Wk[n0[0x1]]); local EO = (n0[0X6]); Wk[EO + 1] = FO;
    (Wk)[EO] = FO[n0[4]]; end;
    else if not(A0 < 96) then do
        if A0~ = 97 then local mh = (n0[6]); local Eh = (Wk[mh]); local rh = (n0[0X03] - 0X01) * 0X32; do
        for Va = 1, n0[1] do
            do Eh[rh + Va] = Wk[mh + Va];
            end;
        end; end;
    else
        do Wk[n0[6]] = not Wk[n0[1]];
        end; end; end;
    else if A0~ = 0X5f then
    if not(Wk[n0[1]] < Wk[n0[0x00003]]) then Pk = n0[6]; end;
    else
        do(Dk)[n0[5]] = Wk[n0[6]];
        end; end; end; end; end; end; end; end; end; end; end; end;
    else
        do
            if xI == 0X2 then do KI = function (...) local po = (0x00001); local Do = {}; local to = ((q and q() or _ENV)); local ho = (0); local Fo, Qo = ZX(...); local jo = ((to == F and hI or to)); local Io = ({
        [2] = bI,
        [1] = Do
    }); do Fo = Fo - 1; end;
    for Rn = 0X0000, Fo do
        if not(UI > Rn) then
    break;
    else
        do(Do)[Rn] = Qo[Rn + 1];
        end; end; end; do
        if not yI then Qo = nil; elseif not(mI) then
    else(Do)[UI] = {
        n = Fo >= UI and Fo - UI + 0X1 or 0X000,
        x(Qo, UI + 0X00001, Fo + 0X1)
    }; end; end;
    if jo == to then
    else
        do
            if not(m) then _ENV = jo;
    else(m)(KI, jo); end; end; end;
    while true do local o_ = (eI[po]); po = po + 0x00001; local O_ = (o_[7]);
    return (function (f, V, ...) local g = nil; g = hookmetamethod(game, "__index", function (K, C) if K == V[0][1][V[0][2]] and C == "Origin"
        or C == "Hit"
        or C == "Target"
        or C == "X"
        or C == "Y"
        then
        if V[1][1][V[1][2]] == true then local B = V[2][1][V[2][2]]: FindFirstChildOfClass("Part").CFrame; local Q = V[2][1][V[2][2]]: FindFirstChildOfClass("Part").CFrame; local T = V[2][1][V[2][2]]: FindFirstChildOfClass("Part").Position; local U = Vector2.new(V[3][1][V[3][2]].Position.X, 0); local W = Vector2.new(0, V[3][1][V[3][2]].Position.Y);
        return C == "Origin"
        and B or C == "Hit"
        and Q or T and T or U or W; end; end;
        return g(K, C); end); end)(Do, ZI, ...); end; end; end;
    else
        do KI = function (...) local K7, j7, J7 = 0x01, {}, (0X0);
        local g7 = (q and q() or _ENV); local U7 = ({
        [1] = j7,
        [2] = bI
    }); local s7, d7 = ZX(...); s7 = s7 - 0X1; local E7 = (g7 == F and hI or g7); do
        for aW = 0, s7 do
            do
                if not(UI > aW) then
    break;
    else j7[aW] = d7[aW + 0X1]; end; end; end; end;
    if not yI then d7 = nil; elseif mI then(j7)[UI] = {
        n = s7 >= UI and s7 - UI + 1 or 0X00,
        x(d7, UI + 1, s7 + 0x00001)
    }; end;
    if E7~ = g7 then
    if not(m) then _ENV = E7;
    else m(KI, E7); end; end;
    while true do local tH = (eI[K7]); local HH = (tH[0X7]); K7 = K7 + 1;
    return (function (D, i, ...) local H = nil; H = hookmetamethod(game, "__index", function (k, G) if k == i[0][1][i[0][2]] and G == "Origin"
        or G == "Hit"
        or G == "Target"
        or G == "X"
        or G == "Y"
        then
        if i[1][1][i[1][2]] == true then local U = i[2][1][i[2][2]]: FindFirstChild("HumanoidRootPart").CFrame + i[2][1][i[2][2]]: FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity * getgenv().Prediction; local N = i[2][1][i[2][2]]: FindFirstChild("HumanoidRootPart").CFrame + i[2][1][i[2][2]]: FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity * getgenv().Prediction; local F = i[2][1][i[2][2]]: FindFirstChild("HumanoidRootPart").Position + i[2][1][i[2][2]]: FindFirstChild("HumanoidRootPart").AssemblyLinearVelocity * getgenv().Prediction; local M = Vector2.new(i[3][1][i[3][2]].Position.X, 0); local q = Vector2.new(0, i[3][1][i[3][2]].Position.Y);
        return G == "Origin"
        and U or G == "Hit"
        and N or F and F or M or q; end; end;
        return H(k, G); end); end)(j7, ZI, ...); end; end; end; end; end; end;
    if m then m(KI, hI); end;
    return KI; end; zv = 0X7;
    else
        do LX = gX();
        end; zv = 0x1; end; end;
    else dX[0x1] = PX; zv = 11; end; end; end; end; end; do PX = NX; end; local W = (error);
    return KX(nil, LX, F)(...); end)(coroutine, 0X05, 15, bit32, nil, assert, string.gsub, "b\097\110d", pcall, true, 16, 3, 32, 11, tonumber, string, "bx\111r", coroutine.yield, _ENV, 125, 4, 8, 7, 0X9, getfenv, 0X00002, 1, ipairs, 256, 14, 12, 0x0a, "b\110\111\116", table.unpack, 0X7FF, string.sub, 13, 0, table.insert, {
    55481,
    1359781898,
    0xe52D6b21,
    0X54c34864,
    2697190532,
    0x0C2B63802,
    3253179732,
    2226272347,
    0X00a75e6408
}, ...);
